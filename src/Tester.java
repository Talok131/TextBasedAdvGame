public class Tester {    static Coins coin = new Coins();    static LowerDeck ld = new LowerDeck();    static UpperDeck ud = new UpperDeck();    static Shore sh = new Shore();    static Cave cv = new Cave();    static Places map;    static Player Talon = new Player("Talon", false, 100);    public static boolean gameOver = false;    public static boolean beganIsland = false;    public static void main(String[] args) {        switchMap(1);        Talon.spawn();        //No one sees this        if ((MyTools.readString("Press enter to begin...")).equals("tgm"))            Talon.tgm();        //How the program runs. Literally everything stems from interactions here.        while (!gameOver) {            playerChoice(MyTools.readChar("What would you like to do? (Type H for help)"));            if (map.getMapID() == 4 && Player.getxCord() == 21 && Player.getyCord() == 4){                break;            }        }        if(gameOver) {        } else {            System.out.println("You've defeated Black Beard and secured the treasure! Yaaaaaaay!");        }    }    public static void switchMap(int num) {        switch (num) {            case 1:                map = ld;                break;            case 2:                map = ud;                break;            case 3:                map = sh;                Talon.spawn();                beganIsland = true;                System.out.println("The Dread Pirate Bobert: Aye mateys... Land atlast." +                        "\n\tYe bunch of land lubbers've spent far too long" +                        "\n\tat sea to return with no gold! That thars the cave." +                        "\n\tYou go in first, @, Yee be the strongest of the bunch." +                        "\n\tDo us a favor and clear any foes ye might find on yer way." +                        "\n\tMister Godfrey is waiting by the cave, said he had a gift for you." +                        "\n\tWe'll see ye at either the bottom of this cave or the bottom of" +                        "\n\tDavy Jones locker.");                break;            case 4:                map = cv;                break;        }    }    public static void skeletonTile(char action){        System.out.println("A skeleton rises from the ground...");        System.out.println("________________________________________" +                "\n|                FIGHT!                |" +                "\n¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");        map.playerMove(action);        Skeleton skelly = new Skeleton(60, 60, 9, 12, 135, null);        Talon.beginAttack(skelly);        map.setCurrentTile(' ');        System.out.print(map);    }    public static void spiderTile(char action){        System.out.println("A massive spider drops from the ceiling...");        System.out.println("________________________________________" +                "\n|                FIGHT!                |" +                "\n¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");        map.playerMove(action);        Spider spidey = new Spider(45, 45, 11, 14, 110, null);        Talon.beginAttack(spidey);        map.setCurrentTile(' ');        System.out.print(map);    }    public static void bossFight(char action){        System.out.println("Black Beard stands between you and the treasure...");        System.out.println("________________________________________" +                "\n|                FIGHT!                |" +                "\n¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");        map.playerMove(action);        BlackBeard blackBeard = new BlackBeard(200, 200, 17, 19, 5000, null);        Talon.beginAttack(blackBeard);        map.setCurrentTile(' ');        System.out.print(map);    }    public static void ratTile(char action) {        System.out.println("A large rat stares you down menacingly...");        System.out.println("________________________________________" +                "\n|                FIGHT!                |" +                "\n¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");        switch (map.getMapID()) {            case 1:                map.playerMove(action);                Rat rat = new Rat(15, 15, 1, 3, 10, null);                Talon.beginAttack(rat);                map.setCurrentTile('_');                System.out.print(map);        }    }    public static void chestTile(char action) {        switch (map.getMapID()) {            case 1:                ld.cabinChest.collectChest(Talon);            case 4:                switch (Player.getxCord()){                    case 3:                        cv.room2.collectChest(Talon);                        break;                    case 12:                        cv.room1.collectChest(Talon);                        break;                    case 13:                        cv.room4.collectChest(Talon);                        break;                    case 15:                        cv.room3.collectChest(Talon);                        break;                }                break;        }    }    public static void lockedDoorTile(char action) {        switch (map.getMapID()) {            case 1:                if (Talon.isInventoryEmpty()) {                    System.out.println("You need a key to open this door.");                } else {                    Talon.openInventory();                    int temp = MyTools.readInt("Select the inventory location with the desired Key");                    try {                        if (ld.cabinDoor.keyTest(Talon.useKey(temp - 1))) {                            System.out.println("You use the key to open the door.");                            map.getMap()[8][6] = '_';                            break;                        } else {                            System.out.println("The key doesn't fit...");                            break;                        }                    } catch (ClassCastException e) {                        System.out.println("You must select a key.");                        break;                    }                }                break;            case 4:                switch (Player.getxCord()){                    case 6:                        if (Talon.isInventoryEmpty()) {                            System.out.println("You need a key to open this door.");                        } else {                            Talon.openInventory();                            int temp = MyTools.readInt("Select the inventory location with the desired Key");                            try {                                if (cv.door1.keyTest(Talon.useKey(temp - 1))) {                                    System.out.println("You use the key to open the door.");                                    map.getMap()[11][5] = ' ';                                    break;                                } else {                                    System.out.println("The key doesn't fit...");                                    break;                                }                            } catch (ClassCastException e) {                                System.out.println("You must select a key.");                                break;                            }                        }                    case 16:                        if (Talon.isInventoryEmpty()) {                            System.out.println("You need a key to open this door.");                        } else {                            Talon.openInventory();                            int temp = MyTools.readInt("Select the inventory location with the desired Key");                            try {                                if (cv.door2.keyTest(Talon.useKey(temp - 1))) {                                    System.out.println("You use the key to open the door.");                                    map.getMap()[8][16] = ' ';                                    break;                                } else {                                    System.out.println("The key doesn't fit...");                                    break;                                }                            } catch (ClassCastException e) {                                System.out.println("You must select a key.");                                break;                            }                        }                    case 13:                        if (Talon.isInventoryEmpty()) {                            System.out.println("You need a key to open this door.");                        } else {                            Talon.openInventory();                            int temp = MyTools.readInt("Select the inventory location with the desired Key");                            try {                                if (cv.door3.keyTest(Talon.useKey(temp - 1))) {                                    System.out.println("You use the key to open the door.");                                    map.getMap()[3][13] = ' ';                                    break;                                } else {                                    System.out.println("The key doesn't fit...");                                    break;                                }                            } catch (ClassCastException e) {                                System.out.println("You must select a key.");                                break;                            }                        }                    case 17:                        if (Talon.isInventoryEmpty()) {                            System.out.println("You need a key to open this door.");                        } else {                            Talon.openInventory();                            int temp = MyTools.readInt("Select the inventory location with the desired Key");                            try {                                if (cv.door4.keyTest(Talon.useKey(temp - 1))) {                                    System.out.println("You use the key to open the door.");                                    map.getMap()[11][18] = ' ';                                    break;                                } else {                                    System.out.println("The key doesn't fit...");                                    break;                                }                            } catch (ClassCastException e) {                                System.out.println("You must select a key.");                                break;                            }                        }                }        }    }    public static void gilbertGodfreyTile(char action) {        switch (map.getMapID()) {            case 1:                ld.gilbertGodfrey.Interaction();                break;            case 3:                ld.gilbertGodfrey.IslandPreCaveInteraction();                break;        }    }    public static void zoneDoorTile(char action) {        switch (map.getMapID()) {            case 1:                ld.getMap()[1][5] = '_';                ld.getMap()[1][7] = '_';                switchMap(2);                Talon.spawn();                break;            case 2:                ud.getMap()[1][5] = '_';                ud.getMap()[1][7] = '_';                ld.setPlayerStartingX(6);                ld.setPlayerStartingY(2);                switchMap(1);                Talon.spawn();                break;            case 3:                switchMap(4);                Talon.spawn();                break;            case 4:                System.out.println("You remember the gold waiting in this cave and decide not to turn back.");                break;        }    }    public static void pirateTile(char action) {        switch (map.getMapID()) {            case 2:                map.playerMove(action);                System.out.print(map);                ud.pirates.interaction();                break;            case 4:                System.out.println("Black Beard and his crew stand between you and the treasure...");                System.out.println("________________________________________" +                        "\n|                FIGHT!                |" +                        "\n¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");                map.playerMove(action);                BlackBeardsCrew blackBeardCrew = new BlackBeardsCrew(80, 80, 13, 16, 350, null);                Talon.beginAttack(blackBeardCrew);                map.setCurrentTile(' ');                System.out.print(map);                break;        }    }    public static void playerChoice(char action) {        switch (testNextTile(action)) {            case 111:                skeletonTile(action);                break;            case 901:                spiderTile(action);                break;            case 15:                bossFight(action);                break;            case 94:                ratTile(action);                break;            case 69:                chestTile(action);                break;            case 420:                ud.captain.interaction(Talon);            case 5:                lockedDoorTile(action);                break;            case 1028:                gilbertGodfreyTile(action);                break;            case 13:                pirateTile(action);                break;            case 10:                zoneDoorTile(action);                break;            case 1:                System.out.println("You push up against a wall and realize you aren't a ghost.");                break;            case 0:                map.playerMove(action);                System.out.print(map);                break;            case -1:                break;        }    }    public static void altAction(char action) {        switch (action) {            case 'o':                Talon.openInventoryMenu();                break;            case 'h':                System.out.println("Type N, S, W, E to move." +                        "\nType O to open your inventory menu." +                        "\nType M to re-open the map.");                break;            case 'm':                System.out.println(map);                break;            default:                System.out.println("Type H for help.");                break;        }    }    public static int testNextTile(char action) {        int x = Talon.getxCord();        int y = Talon.getyCord();        boolean moved = true;        switch (action) {            case 'n':                y -= 1;                break;            case 's':                y += 1;                break;            case 'w':                x -= 1;                break;            case 'e':                x += 1;                break;            default:                moved = false;                altAction(action);                break;        }        if (moved) {            switch (map.getMap()[y][x]) {                //Walls                case '/':                case '-':                case '|':                case '\\':                case '║':                case 'Ø':                case '~':                case '¯':                    return 1;                //Gilbert Godfrey                case 'G':                    return 1028;                //Doors                case 'X':                    return 5;                //Zone Doors                case 'O':                    return 10;                case 'D':                    return 10;                //Rats                case 'r':                    return 94;                case 'K':                    return 111;                case 'S':                    return 901;                case 'B':                    return 15;                //Chests                case 'c':                    return 69;                case 'C':                    return 420;                //YAR HAR FIDDILEY DEE                case 'P':                    return 13;                //Walking Tiles                default:                    return 0;            }        }        return -1;    }}